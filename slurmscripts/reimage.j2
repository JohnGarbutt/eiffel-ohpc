#!/usr/bin/env python
""" Reimage slurm nodes.

    Runs on ansible/tf control host as user "centos".
    
    Can run manually as e.g.:
        reimage ohpc-compute-2
"""

from __future__ import print_function
import sys, subprocess, os, re, datetime, logging

TF_CMD = 'terraform'
ANSIBLE_CMD = 'ansible-playbook'
VENV = '{{ venv }}'
TF_DIR = '{{ playbook_dir }}/terraform_ohpc'
ANSIBLE_DIR = '{{ playbook_dir }}'
COMPUTE_RESOURCE = '{{ tf_compute_resource }}' # terraform "resource type" of compute instances
TF_LOCK_TIMEOUT = '{{ tf_lock_timeout }}' # number of seconds to retry terraform operations if state file locked
LOG_FILE = '/var/tmp/reimage.log'

def call(args, cwd):
    """ Run a command using shell=True in specified directory.
    
        Shell is required here as ansible/terraform aren't found otherwise.
    """
    cmd = ' '.join(args) # undocumented, but can only pass str to shell=True
    logging.info('calling:', cmd, 'in', cwd)
    try:
        subprocess.check_call(cmd, shell=True, cwd=cwd)
    except:
        raise

def shell_source(script):
    """ Emulate the action of "source" in bash, setting environment vars.
    
        From https://stackoverflow.com/a/12708396/916373
    """
    pipe = subprocess.Popen(". %s; env" % script, stdout=subprocess.PIPE, shell=True)
    output = pipe.communicate()[0]
    env = dict((line.split("=", 1) for line in output.splitlines()))
    os.environ.update(env)

def main():

    compute_changes=[sys.argv[1]] # e.g. ['ohpc-compute-2']
    logging.info('{timestamp}: reimage.py running to change {compute_changes}'.format(timestamp=datetime.datetime.now().isoformat(), compute_changes=compute_changes))

    # load environment:
    shell_source(os.path.expanduser(VENV))
    
    # get list of existing compute instances:
    tf_state = "{TF_CMD} state list {COMPUTE_RESOURCE}.compute".format(TF_CMD=TF_CMD, COMPUTE_RESOURCE=COMPUTE_RESOURCE)
    output = subprocess.Popen(tf_state, stdout=subprocess.PIPE, shell=True, cwd=TF_DIR).communicate()[0]
    existing_compute = re.findall("ohpc-compute-[0-9]+", output)
    logging.info('existing compute:', existing_compute)
    
    # create terraform arguments:
    target_args = ["-target='{COMPUTE_RESOURCE}.compute[\"{node}\"]'".format(COMPUTE_RESOURCE=COMPUTE_RESOURCE, node=node) for node in compute_changes]
    target_args += ["-target='local_file.hosts'"] # always recreate this, as IP addresses change
    nodenames_arg = '-var nodenames="{nodenames}"'.format(nodenames=' '.join(existing_compute))
    timeout_arg = '-lock-timeout={TF_LOCK_TIMEOUT}s'.format(TF_LOCK_TIMEOUT=TF_LOCK_TIMEOUT)
    
    # rebuilt instance and refresh ohpc_hosts file:
    call([TF_CMD, 'apply', timeout_arg, '-auto-approve', nodenames_arg] + target_args, cwd=TF_DIR)
    
    # run ansible to configure *all* hosts (due to using /etc/hosts):
    call([ANSIBLE_CMD, 'main.yml', '-i', 'terraform_ohpc/ohpc_hosts'], cwd=ANSIBLE_DIR)
    
    logging.info('{timestamp}: reimage.py finished'.format(timestamp=datetime.datetime.now().isoformat()))

if __name__ == '__main__':
    logging.basicConfig(filename=LOG_FILE,level=logging.INFO)
    main()
