#!/usr/bin/env python

""" Create/remove slurm nodes.

    Runs on ansible/tf control host as user "centos"
    Driven by suspend.sh/resume.sh run by SlurmUser on slurm control host (ohpc-login)
"""

from __future__ import print_function
import sys, subprocess, os, re

TF_CMD = 'terraform'
ANSIBLE_CMD = 'ansible-playbook'
VENV = '{{ venv }}'
TF_DIR = '{{ playbook_dir }}/terraform_ohpc'
ANSIBLE_DIR = '{{ playbook_dir }}'
COMPUTE_RESOURCE = 'openstack_compute_instance_v2'

def call(args, cwd):
    """ Run a command using shell=True in specified directory.
    
        Shell is required here as ansible/terraform aren't found otherwise.
    """
    cmd = ' '.join(args) # undocumented, but can only pass str to shell=True
    print('calling:', cmd, 'in', cwd)
    try:
        subprocess.check_call(cmd, shell=True, cwd=cwd)
    except:
        raise

def shell_source(script):
    """ Emulate the action of "source" in bash, setting environment vars.
    
        From https://stackoverflow.com/a/12708396/916373
    """
    pipe = subprocess.Popen(". %s; env" % script, stdout=subprocess.PIPE, shell=True)
    output = pipe.communicate()[0]
    env = dict((line.split("=", 1) for line in output.splitlines()))
    os.environ.update(env)

def main():

    mode=sys.argv[1]
    if mode not in ('suspend', 'resume'):
        exit('Invalid mode argument {mode!r}'.format(mode=mode))
    compute_changes=sys.argv[2:] # e.g. ['ohpc-compute-2', 'ohpc-compute-19']
    print('scale.py running in {mode} mode to change {compute_changes}'.format(mode=mode, compute_changes=compute_changes))
    
    # load environment:
    shell_source(os.path.expanduser(VENV))
    
    # get existing compute instances as a list:
    tf_state = "{TF_CMD} state list {COMPUTE_RESOURCE}.compute".format(TF_CMD=TF_CMD, COMPUTE_RESOURCE=COMPUTE_RESOURCE)
    output = subprocess.Popen(tf_state, stdout=subprocess.PIPE, shell=True, cwd=TF_DIR).communicate()[0]
    existing_compute = re.findall("ohpc-compute-[0-9]+", output)
    print('existing compute:', existing_compute)
    
    # create new cluster instance list:
    # NB using sets is safer than string operations as avoids e.g. adding existing node
    if mode == 'resume':
        cluster_compute = sorted(set(existing_compute) | set(compute_changes))
    elif mode == 'suspend':
        cluster_compute = sorted(set(existing_compute) - set(compute_changes))
    nodenames = ' '.join(cluster_compute)
    print('cluster_compute:', cluster_compute)

    # create terraform '-target' arguments:
    targets = ["-target='{COMPUTE_RESOURCE}.compute[\"{node}\"]'".format(COMPUTE_RESOURCE=COMPUTE_RESOURCE, node=node) for node in compute_changes]
    print('targets:', targets)

    # remove ohpc_hosts file to force regeneration:
    call([TF_CMD, 'destroy', '-target=local_file.hosts', '-auto-approve'], cwd=TF_DIR)

    # change instances
    if mode == 'resume':

        # create instances:
        tf_apply = [TF_CMD, 'apply', '-var nodenames="{nodenames}"'.format(nodenames=nodenames)] + targets + ['-auto-approve']
        call(tf_apply, cwd=TF_DIR)
        
        # regenerate hosts file:
        tf_apply_hosts = [TF_CMD, 'apply', '-var nodenames="{nodenames}"'.format(nodenames=nodenames), '-target=local_file.hosts', '-auto-approve']
        call(tf_apply_hosts, cwd=TF_DIR)
        
        # run ansible to configure *all* hosts (due to using /etc/hosts):
        ansible_main = [ANSIBLE_CMD, 'main.yml', '-i', 'terraform_ohpc/ohpc_hosts']
        call(ansible_main, cwd=ANSIBLE_DIR)
        
    elif mode == 'suspend':

        # delete instances:
        tf_destroy = [TF_CMD, 'destroy', '-var nodenames="{nodenames}"'.format(nodenames=nodenames)] + targets + ['-auto-approve']
        call(tf_destroy, cwd=TF_DIR)
        
        # regenerate hosts file:
        tf_apply_hosts = [TF_CMD, 'apply', '-var nodenames="{nodenames}"'.format(nodenames=nodenames), '-target=local_file.hosts', '-auto-approve']
        call(tf_apply_hosts, cwd=TF_DIR)
        
    else:
        exit('ERROR: invalid mode {mode}'.format(mode=mode))
    
    print('scale.py finished')

if __name__ == '__main__':
    main()
