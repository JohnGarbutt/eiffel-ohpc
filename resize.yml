# Resize the cluster. Note this assumes there are no cloud nodes!

#- import_playbook: drain.yml # TODO: make this optional somehow

- name: add/remove nodes
  hosts: localhost
  gather_facts: false
  tasks:
    - name: identify nodes to delete by comparing inventory against `min_nodes`
      # NB will always to_delete last nodes in partition
      set_fact:
        to_delete: "{{ groups['ohpc_compute'][(ohpc_partitions[0].min_nodes - groups['ohpc_compute'] | length):] if ohpc_partitions[0].min_nodes < groups['ohpc_compute'] | length else []}}"
      # TODO: handle multiple partitions
    - name: identify nodes to add by comparing inventory against `min_nodes`
      set_fact:
        to_add: "{{ range(ohpc_partitions[0].min_nodes) | map('regex_replace', '^(.*)$', 'ohpc-compute-\\1') | list | difference(groups['ohpc_compute']) }}"
      # TODO: handle multiple partitions
    - block:
      - debug:
          msg: "will delete node(s) {{ ' '.join(to_delete) }}"
      # TODO: actually drain nodes!
      - name: return drained nodes to cloud and update inventory, slurm.conf and /etc/hosts
        command: "slurmscripts/reconfigure.py delete {{ ' '.join(to_drain) }}"
      when: "to_delete != []"

    - block:
      - debug:
          msg: "will add node(s) {{ ' '.join(to_add) }}"
      - name: add instances
        command: "slurmscripts/reconfigure.py resume {{ ' '.join(to_add) }}"
      when: "to_add != []"

    - debug:
        msg: "no nodes to be added/deleted"
      when: "to_delete == [] and to_add == []"
      # TODO: EXIT NOW!

- name: restart slurm daemons
  gather_facts: false
  hosts:
  - cluster_control
  - cluster_batch
  become: true
  vars:
    slurm_service:
      cluster_control: slurmctld
      cluster_batch: slurmd
  tasks:
    - meta: refresh_inventory # needed so we don't try to run on deleted nodes
    - name: reconfigure slurm
      command: "scontrol reconfigure"
      run_once: true
    - service:
        name: "{{ slurm_service[item] }}"
        state: restarted
      loop: "{{ slurm_service.keys() }}"
      when: "item in group_names"
